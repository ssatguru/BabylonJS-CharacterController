{"version":3,"file":"CharacterController.js","mappings":"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","sources":["webpack://babylonjs-charactercontroller/webpack/universalModuleDefinition","webpack://babylonjs-charactercontroller/external umd {\"commonjs\":\"babylonjs\",\"commonjs2\":\"babylonjs\",\"amd\":\"babylonjs\",\"root\":\"BABYLON\"}","webpack://babylonjs-charactercontroller/webpack/bootstrap","webpack://babylonjs-charactercontroller/webpack/runtime/compat get default export","webpack://babylonjs-charactercontroller/webpack/runtime/define property getters","webpack://babylonjs-charactercontroller/webpack/runtime/hasOwnProperty shorthand","webpack://babylonjs-charactercontroller/webpack/runtime/make namespace object","webpack://babylonjs-charactercontroller/./src/CharacterController.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"babylonjs\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"babylonjs\"], factory);\n\telse {\n\t\tvar a = typeof exports === 'object' ? factory(require(\"babylonjs\")) : factory(root[\"BABYLON\"]);\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, (__WEBPACK_EXTERNAL_MODULE__247__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__247__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\r\n    Skeleton,\r\n    ArcRotateCamera,\r\n    Vector3,\r\n    Mesh,\r\n    Node,\r\n    Scene,\r\n    Ray,\r\n    PickingInfo,\r\n    AnimationGroup,\r\n    TransformNode,\r\n    TargetedAnimation,\r\n    Matrix,\r\n    DeepImmutable,\r\n    AbstractMesh,\r\n    PlaySoundAction,\r\n    InstancedMesh,\r\n    Sound,\r\n    AnimationRange,\r\n    Animatable,\r\n    AnimationEvent,\r\n    int,\r\n    LinesMesh,\r\n    MeshBuilder,\r\n    Color3\r\n} from \"babylonjs\";\r\n\r\n\r\nexport class CharacterController {\r\n\r\n    private _avatar: Mesh = null;\r\n    private _skeleton: Skeleton = null;\r\n    private _camera: ArcRotateCamera;\r\n    private _scene: Scene;\r\n    public getScene(): Scene {\r\n        return this._scene;\r\n    }\r\n\r\n\r\n    private _gravity: number = 9.8;\r\n    //slopeLimit in degrees\r\n    private _minSlopeLimit: number = 30;\r\n    private _maxSlopeLimit: number = 45;\r\n    //slopeLimit in radians\r\n    private _sl1: number = Math.PI * this._minSlopeLimit / 180;\r\n    private _sl2: number = Math.PI * this._maxSlopeLimit / 180;\r\n\r\n    //The av will step up a stair only if it is closer to the ground than the indicated value.\r\n    private _stepOffset: number = 0.25;\r\n\r\n    \r\n    private _actionMap: ActionMap = new ActionMap();\r\n\r\n    private _cameraElastic: boolean = true;\r\n    private _cameraTarget: Vector3 = Vector3.Zero();\r\n    //should we go into first person view when camera is near avatar (radius is lowerradius limit)\r\n    private _noFirstPerson: boolean = false;\r\n\r\n    private _down: Vector3 = Vector3.DownReadOnly;\r\n\r\n\r\n    public setSlopeLimit(minSlopeLimit: number, maxSlopeLimit: number) {\r\n        this._minSlopeLimit = minSlopeLimit;\r\n        this._maxSlopeLimit = maxSlopeLimit;\r\n\r\n        this._sl1 = Math.PI * this._minSlopeLimit / 180;\r\n        this._sl2 = Math.PI * this._maxSlopeLimit / 180;\r\n    }\r\n\r\n    /**\r\n     * The av will step up a stair only if it is closer to the ground than the indicated value.\r\n     * Default value is 0.25 m\r\n     */\r\n    public setStepOffset(stepOffset: number) {\r\n        this._stepOffset = stepOffset;\r\n    }\r\n\r\n    public setWalkSpeed(n: number) {\r\n        this._actionMap.walk.speed = n;\r\n    }\r\n    public setRunSpeed(n: number) {\r\n        this._actionMap.run.speed = n;\r\n    }\r\n    public setBackSpeed(n: number) {\r\n        this._actionMap.walkBack.speed = n;\r\n    }\r\n    public setBackFastSpeed(n: number) {\r\n        this._actionMap.walkBackFast.speed = n;\r\n    }\r\n    public setJumpSpeed(n: number) {\r\n        this._actionMap.idleJump.speed = n;\r\n        this._actionMap.runJump.speed = n;\r\n    }\r\n    public setLeftSpeed(n: number) {\r\n        this._actionMap.strafeLeft.speed = n;\r\n    }\r\n    public setLeftFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    public setRightSpeed(n: number) {\r\n        this._actionMap.strafeRight.speed = n;\r\n    }\r\n    public setRightFastSpeed(n: number) {\r\n        this._actionMap.strafeLeftFast.speed = n;\r\n    }\r\n    // get turnSpeed in degrees per second.\r\n    // store in radians per second\r\n    public setTurnSpeed(n: number) {\r\n        this._actionMap.turnLeft.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRight.speed = n * Math.PI / 180;\r\n    }\r\n    public setTurnFastSpeed(n: number) {\r\n        this._actionMap.turnLeftFast.speed = n * Math.PI / 180;\r\n        this._actionMap.turnRightFast.speed = n * Math.PI / 180;\r\n    }\r\n    public setGravity(n: number) {\r\n        this._gravity = n;\r\n    }\r\n\r\n    /**\r\n     * Use this to provide animationGroups to the character controller.\r\n     * Provide the AnimationGroups using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animationGroup.\r\n     * Example:\r\n     * let myWalkAnimationGroup:AnimationGroup = ...;\r\n     * let agMap:{} = {\r\n     *  \"walk\":myWalkAnimationGroup,\r\n     *  \"run\" : {\"ag\":myRunAnimationGroup,\"rate\":1},\r\n     *  \"idle\" : {\"ag\":myIdleAnimationGroup,\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     *   ....\r\n     * }\r\n     * \r\n     * @param agMap a map of character controller animation name to animationGroup\r\n     */\r\n    public setAnimationGroups(agMap: {}) {\r\n        if (this._prevActData != null && this._prevActData.exist) this._prevActData.ag.stop();\r\n        this._isAG = true;\r\n        this.setActionMap(<ActionMap>agMap);\r\n    }\r\n\r\n    /**\r\n     * Use this to provide AnimationRanges to the character controller.\r\n     * Provide the AnimationRanges using a Map\r\n     * In this Map the key would be the character controller animation name and\r\n     * the key value would be the animation range name or an object with animation range data.\r\n     * example:\r\n     * let arMap = {\r\n     *  \"walk\":\"myWalk\",\r\n     *  \"run\" : {\"name\":\"myRun\",\"rate\":1},\r\n     *  \"idle\" : {\"name\":\"myIdle\",\"loop\":true,\"rate\":1},\r\n     *  ....\r\n     * }\r\n     * \r\n     * @param arMap a map of character controller animation name to animationRange data\r\n     */\r\n\r\n    public setAnimationRanges(arMap: {}) {\r\n        this._isAG = false;\r\n        this.setActionMap(<ActionMap>arMap);\r\n    }\r\n\r\n    /**\r\n     * updates action data in the cc actionMap\r\n     * with action data from the provided/input actionMap \r\n     * \r\n     * \r\n     * return \"ar\" or \"ag\" depending on if the data provided\r\n     * was animation range or animation group data respt.\r\n     * \r\n     * TODO should validate provided data.\r\n     * In other words if animation range provided make sure\r\n     * the range exist in the skeleton\r\n     * or if animation group provided make sure the animation group\r\n     * can be played on this avataor\r\n     * \r\n     * @param inActMap \r\n     * @returns \r\n     */\r\n    public setActionMap(inActMap: ActionMap): string {\r\n        let agMap: boolean = false;\r\n        let inActData: ActionData;\r\n\r\n\r\n        let ccActionNames: string[] = Object.keys(this._actionMap);\r\n        for (let ccActionName of ccActionNames) {\r\n            let ccActData = this._actionMap[ccActionName];\r\n            //some keys could map to functions (like reset())\r\n            if (!(ccActData instanceof ActionData)) continue;\r\n            ccActData.exist = false;\r\n\r\n            inActData = inActMap[ccActData.id];\r\n            //in previous version of cc the key value was AnimationGroup rather than ActionData\r\n            //lets accomodate that for backward compatibility\r\n            if (inActData != null) {\r\n                if (inActData instanceof AnimationGroup) {\r\n                    ccActData.ag = inActData;\r\n                    ccActData.name = ccActData.ag.name;\r\n                    ccActData.exist = true;\r\n                    agMap = true;\r\n                    this._hasAnims = true;\r\n                } else if (inActData.exist) {\r\n                    this._hasAnims = true;\r\n                    ccActData.exist = true;\r\n                    if (inActData instanceof Object) {\r\n                        if (inActData.ag) {\r\n                            ccActData.ag = inActData.ag;\r\n                            agMap = true;\r\n                        }\r\n                        if (inActData.name) {\r\n                            ccActData.name = inActData.name;\r\n                        }\r\n                        if (inActData.loop != null) ccActData.loop = inActData.loop;\r\n                        if (inActData.rate) ccActData.rate = inActData.rate;\r\n                        if (inActData.speed) ccActData.speed = inActData.speed;\r\n                        // if (actDataI.key) actDataO.key = actDataI.key;\r\n                        if (inActData.sound) ccActData.sound = inActData.sound;\r\n                    } else {\r\n                        ccActData.name = inActData;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n        //force to play new anims\r\n        this._prevActData = null;\r\n        if (agMap) return \"ag\"; else return \"ar\";\r\n    }\r\n\r\n    public getActionMap(): ActionMap {\r\n        let map: ActionMap = new ActionMap();\r\n\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let actDataI = this._actionMap[key];\r\n\r\n            if (!(actDataI instanceof ActionData)) continue;\r\n            if (!actDataI.exist) continue;\r\n\r\n            let actDataO: ActionData = map[actDataI.id];\r\n            actDataO.ag = actDataI.ag;\r\n            actDataO.name = actDataI.name;\r\n            actDataO.loop = actDataI.loop;\r\n            actDataO.rate = actDataI.rate;\r\n            actDataO.speed = actDataI.speed;\r\n            actDataO.key = actDataI.key;\r\n            actDataO.sound = actDataI.sound;\r\n            actDataO.exist = actDataI.exist;\r\n        }\r\n\r\n        return map;\r\n    }\r\n\r\n    public getSettings(): CCSettings {\r\n        let ccs: CCSettings = new CCSettings();\r\n        ccs.faceForward = this.isFaceForward();\r\n        ccs.topDown = this.getMode() == 1 ? true : false;\r\n        ccs.turningOff = this.isTurningOff();\r\n        ccs.cameraTarget = this._cameraTarget.clone();\r\n        ccs.cameraElastic = this._cameraElastic;\r\n        ccs.elasticSteps = this._elasticSteps;\r\n        ccs.makeInvisble = this._makeInvisible;\r\n        ccs.gravity = this._gravity;\r\n        ccs.keyboard = this._ekb;\r\n        ccs.maxSlopeLimit = this._maxSlopeLimit;\r\n        ccs.minSlopeLimit = this._minSlopeLimit;\r\n        ccs.noFirstPerson = this._noFirstPerson;\r\n        ccs.stepOffset = this._stepOffset;\r\n        ccs.sound = this._stepSound;\r\n\r\n        return ccs;\r\n    }\r\n\r\n    public setSettings(ccs: CCSettings) {\r\n        this.setFaceForward(ccs.faceForward);\r\n        this.setMode(ccs.topDown ? 1 : 0);\r\n        this.setTurningOff(ccs.turningOff);\r\n        this.setCameraTarget(ccs.cameraTarget);\r\n        this.setCameraElasticity(ccs.cameraElastic);\r\n        this.setElasticiSteps(ccs.elasticSteps);\r\n        this.makeObstructionInvisible(ccs.makeInvisble);\r\n        this.setGravity(ccs.gravity);\r\n        this.enableKeyBoard(ccs.keyboard);\r\n        this.setSlopeLimit(ccs.minSlopeLimit, ccs.maxSlopeLimit);\r\n        this.setNoFirstPerson(ccs.noFirstPerson);\r\n        this.setStepOffset(ccs.stepOffset);\r\n        this.setSound(ccs.sound);\r\n\r\n    }\r\n\r\n    private _setAnim(anim: ActionData, animName?: string | AnimationGroup, rate?: number, loop?: boolean) {\r\n\r\n        //animation range need skeleton\r\n        if (!this._isAG && this._skeleton == null) return;\r\n\r\n        if (animName != null) {\r\n            if (this._isAG) {\r\n                if (!(animName instanceof AnimationGroup)) return;\r\n                anim.ag = <AnimationGroup>animName;\r\n                anim.exist = true;\r\n            } else {\r\n                if (this._skeleton.getAnimationRange(anim.name) != null) {\r\n                    anim.name = <string>animName;\r\n                    anim.exist = true;\r\n                } else {\r\n                    anim.exist = false;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (loop != null) anim.loop = loop;\r\n        if (rate != null) anim.rate = rate;\r\n    }\r\n\r\n    public enableBlending(n: number) {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let act = this._actionMap[key];\r\n                if (!(act instanceof ActionData)) continue;\r\n                if (act.exist) {\r\n                    let ar: AnimationGroup = act.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = true;\r\n                        ta.animation.blendingSpeed = n;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this._skeleton !== null)\r\n                this._skeleton.enableBlending(n);\r\n        }\r\n    }\r\n\r\n    public disableBlending() {\r\n        if (this._isAG) {\r\n            let keys: string[] = Object.keys(this._actionMap);\r\n            for (let key of keys) {\r\n                let anim = this._actionMap[key];\r\n                if (!(anim instanceof ActionData)) continue;\r\n                if (anim.exist) {\r\n                    let ar: AnimationGroup = anim.ag;\r\n                    for (let ta of ar.targetedAnimations) {\r\n                        ta.animation.enableBlending = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //setters for animations\r\n    public setWalkAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walk, rangeName, rate, loop);\r\n    }\r\n    public setRunAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.run, rangeName, rate, loop);\r\n    }\r\n    public setWalkBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBack, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack);\r\n    }\r\n    public setWalkBackFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.walkBackFast, rangeName, rate, loop);\r\n    }\r\n    public setSlideBackAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.slideBack, rangeName, rate, loop);\r\n    }\r\n    public setIdleAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idle, rangeName, rate, loop);\r\n    }\r\n    public setTurnRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n    }\r\n    public setTurnRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnRightFast, rangeName, rate, loop);\r\n    }\r\n    public setTurnLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n    }\r\n    public setTurnLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.turnLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeRightAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRight, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n    }\r\n    public setStrafeRightFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeRightFast, rangeName, rate, loop);\r\n    }\r\n    public setStrafeLeftAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeft, rangeName, rate, loop);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n    public setStrafeLeftFastAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.strafeLeftFast, rangeName, rate, loop);\r\n    }\r\n    public setIdleJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.idleJump, rangeName, rate, loop);\r\n    }\r\n    public setRunJumpAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.runJump, rangeName, rate, loop);\r\n    }\r\n    public setFallAnim(rangeName: string | AnimationGroup, rate: number, loop: boolean) {\r\n        this._setAnim(this._actionMap.fall, rangeName, rate, loop);\r\n    }\r\n\r\n\r\n    _stepSound: Sound;\r\n    // setters for sound\r\n    public setSound(sound: Sound) {\r\n        if (sound == null) return;\r\n        this._stepSound = sound;\r\n        let ccActionNames: string[] = Object.keys(this._actionMap);\r\n        sound.loop = false;\r\n        for (let ccActionName of ccActionNames) {\r\n            let ccActData = this._actionMap[ccActionName];\r\n            //some keys could map to functions (like reset())\r\n            if (!(ccActData instanceof ActionData)) continue;\r\n            ccActData.sound = sound;\r\n            ccActData.sound.attachToMesh(this._avatar);\r\n        }\r\n        this._actionMap.idle.sound = null;\r\n        this._actionMap.fall.sound = null;\r\n        this._actionMap.slideBack.sound = null;\r\n    }\r\n\r\n\r\n    // setters for keys\r\n    public setWalkKey(key: string) {\r\n        this._actionMap.walk.key = key.toLowerCase();\r\n    }\r\n    public setWalkBackKey(key: string) {\r\n        this._actionMap.walkBack.key = key.toLowerCase();\r\n    }\r\n    public setTurnLeftKey(key: string) {\r\n        this._actionMap.turnLeft.key = key.toLowerCase();\r\n    }\r\n    public setTurnRightKey(key: string) {\r\n        this._actionMap.turnRight.key = key.toLowerCase();\r\n    }\r\n    public setStrafeLeftKey(key: string) {\r\n        this._actionMap.strafeLeft.key = key.toLowerCase();\r\n    }\r\n    public setStrafeRightKey(key: string) {\r\n        this._actionMap.strafeRight.key = key.toLowerCase();\r\n    }\r\n    public setJumpKey(key: string) {\r\n        this._actionMap.idleJump.key = key.toLowerCase();\r\n    }\r\n\r\n    public setCameraElasticity(b: boolean) {\r\n        this._cameraElastic = b;\r\n    }\r\n\r\n    public setElasticiSteps(n: number) {\r\n        this._elasticSteps = n;\r\n    }\r\n\r\n    public makeObstructionInvisible(b: boolean) {\r\n        this._makeInvisible = b;\r\n    }\r\n    public setCameraTarget(v: Vector3) {\r\n        this._cameraTarget.copyFrom(v);\r\n    }\r\n\r\n\r\n    /**\r\n     * user should call this whenever the user changes the camera checkCollision \r\n     * property\r\n     * \r\n     */\r\n    public cameraCollisionChanged() {\r\n        this._savedCameraCollision = this._camera.checkCollisions;\r\n    }\r\n    public setNoFirstPerson(b: boolean) {\r\n        this._noFirstPerson = b;\r\n    }\r\n\r\n    /**\r\n     * if av has the required anim (walk, run etc) then \r\n     * mark that anim as existing\r\n     * \r\n     * @param skel \r\n     */\r\n\r\n    private _checkAnimRanges(skel: Skeleton) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (skel != null) {\r\n                if (skel.getAnimationRange(anim.id) != null) {\r\n                    anim.name = anim.id;\r\n                    anim.exist = true;\r\n                    this._hasAnims = true;\r\n                }\r\n            } else {\r\n                anim.exist = false;\r\n            }\r\n        }\r\n        this._checkFastAnims();\r\n    }\r\n\r\n    /**\r\n     * if fast anims do not exist then use their slow counterpart as them but double the rate at which they play\r\n     */\r\n    private _checkFastAnims() {\r\n        this._copySlowAnims(this._actionMap.walkBackFast, this._actionMap.walkBack)\r\n        this._copySlowAnims(this._actionMap.turnRightFast, this._actionMap.turnRight);\r\n        this._copySlowAnims(this._actionMap.turnLeftFast, this._actionMap.turnLeft);\r\n        this._copySlowAnims(this._actionMap.strafeRightFast, this._actionMap.strafeRight);\r\n        this._copySlowAnims(this._actionMap.strafeLeftFast, this._actionMap.strafeLeft);\r\n    }\r\n\r\n    private _copySlowAnims(f: ActionData, s: ActionData) {\r\n        if (f.exist) return;\r\n        if (!s.exist) return;\r\n        f.exist = true;\r\n        f.ag = s.ag;\r\n        f.name = s.name;\r\n        f.rate = s.rate * 2;\r\n    }\r\n\r\n    /**\r\n     * Use this to make the  character controller suitable for a isometeric/top down games or  fps/third person game.\r\n     * 1 In isometric/top down games the camera direction has no bearing on avatar movement.\r\n     * 0 In fps/third person game rotating the camera around the avatar , rotates the avatar too.\r\n     * \r\n     * cannot switch mode to 0 if no camera avaiable.\r\n     */\r\n    private _mode = 0;\r\n    private _saveMode = 0;\r\n    public setMode(n: number) {\r\n        //cannot switch mode to 0 if no camera avaiable.\r\n        if (this._hasCam) {\r\n            this._mode = n;\r\n            this._saveMode = n;\r\n        } else {\r\n            this._mode = 1;\r\n            this._saveMode = 1;\r\n        }\r\n    }\r\n    public getMode() {\r\n        return this._mode;\r\n    }\r\n    /**\r\n     * Use this to set  turning off.\r\n     * When turining is off \r\n     * a) turn left or turn right keys result in avatar facing and moving left or right with respect to camera.\r\n     * b) walkback/runback key results in avatar facing back and walking/running towards camera.\r\n     * \r\n     * This setting has no effect when mode is 1.\r\n     * \r\n     * @param b \r\n     */\r\n    public setTurningOff(b: boolean) {\r\n        this._noRot = b;\r\n    }\r\n    public isTurningOff() {\r\n        return this._noRot;\r\n    }\r\n\r\n    /**\r\n        * checks if a have left hand , right hand issue.\r\n        * In other words if a mesh is a LHS mesh in RHS system or \r\n        * a RHS mesh in LHS system\r\n        * The X axis will be reversed in such cases.\r\n        * thus Cross product of X and Y should be inverse of Z.\r\n        * BABYLONJS GLB models are RHS and exhibit this behavior\r\n        * \r\n        */\r\n    private _isLHS_RHS = false;\r\n    private _signLHS_RHS = -1;\r\n    private _setRHS(mesh: TransformNode) {\r\n        const meshMatrix: Matrix = mesh.getWorldMatrix();\r\n        const _localX = Vector3.FromArray(meshMatrix.m, 0);\r\n        const _localY = Vector3.FromArray(meshMatrix.m, 4);\r\n        const _localZ = Vector3.FromArray(meshMatrix.m, 8);\r\n        const actualZ = Vector3.Cross(_localX, _localY);\r\n        //same direction or opposite direction of Z\r\n        if (Vector3.Dot(actualZ, _localZ) < 0) {\r\n            this._isLHS_RHS = true;\r\n            this._signLHS_RHS = 1;\r\n        }\r\n        else {\r\n            this._isLHS_RHS = false;\r\n            this._signLHS_RHS = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Use setFaceForward(true|false) to indicate that the avatar's face  points forward (true) or backward (false).\r\n     * The avatar's face  points forward if its face is looking in positive local Z axis direction\r\n     */\r\n    private _ffSign: number;\r\n    private _rhsSign: number;\r\n    private _ff: boolean;\r\n    //in mode 0, av2cam is used to align avatar with camera , with camera always facing avatar's back\r\n    //note:camera alpha is measured anti-clockwise , avatar rotation is measured clockwise \r\n    private _av2cam;\r\n    public setFaceForward(b: boolean) {\r\n        this._ff = b;\r\n\r\n        this._rhsSign = this._scene.useRightHandedSystem ? -1 : 1;\r\n\r\n        if (!this._hasCam) {\r\n            this._av2cam = 0;\r\n            this._ffSign = 1;\r\n            return;\r\n        }\r\n\r\n        if (this._isLHS_RHS) {\r\n            this._av2cam = b ? Math.PI / 2 : 3 * Math.PI / 2;\r\n            this._ffSign = b ? 1 : -1;\r\n        } else {\r\n            this._av2cam = b ? 3 * Math.PI / 2 : Math.PI / 2;\r\n            this._ffSign = b ? -1 : 1;\r\n        }\r\n\r\n    }\r\n\r\n    public isFaceForward() {\r\n        return this._ff;\r\n    }\r\n\r\n    private checkAGs(agMap: {}) {\r\n        let keys: string[] = Object.keys(this._actionMap);\r\n        for (let key of keys) {\r\n            let anim = this._actionMap[key];\r\n            if (!(anim instanceof ActionData)) continue;\r\n            if (agMap[anim.name] != null) {\r\n                anim.ag = agMap[anim.name];\r\n                anim.exist = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // check if any of the mesh on the node tree is refrenced by any animation group\r\n    private _containsAG(node: Node, ags: AnimationGroup[], fromRoot: boolean) {\r\n        let r: Node;\r\n        let ns: Node[];\r\n\r\n        if (fromRoot) {\r\n            r = this._getRoot(node);\r\n            ns = r.getChildren((n) => { return (n instanceof TransformNode) }, false);\r\n        } else {\r\n            r = node;\r\n            ns = [r];\r\n        }\r\n\r\n        for (let ag of ags) {\r\n            let tas: TargetedAnimation[] = ag.targetedAnimations;\r\n            for (let ta of tas) {\r\n                if (ns.indexOf(ta.target) > -1) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //get the root of Node\r\n    private _getRoot(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._getRoot(tn.parent);\r\n    }\r\n\r\n    private _started: boolean = false;\r\n    public start() {\r\n        if (this._started) return;\r\n        this._started = true;\r\n        this._act.reset();\r\n        this._movFallTime = 0;\r\n        //first time we enter render loop, delta time is zero\r\n        this._idleFallTime = 0.001;\r\n        this._grounded = false;\r\n        this._updateTargetValue();\r\n        if (this._ekb) this._addkeylistener();\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    public stop() {\r\n        if (!this._started) return;\r\n        this._started = false;\r\n        this._scene.unregisterBeforeRender(this._renderer);\r\n        this._removekeylistener();\r\n        this._prevActData = null;\r\n    }\r\n\r\n    /**\r\n     * use pauseAnim to stop the charactere controller from playing\r\n     * any animation on the character\r\n     * use this when you want to play your animation instead\r\n     * see also resumeAnim()\r\n     */\r\n    private _stopAnim: boolean = false;\r\n    public pauseAnim() {\r\n        this._stopAnim = true;\r\n\r\n        if (this._prevActData != null && this._prevActData.exist) {\r\n            //stop current animation\r\n            if (this._isAG) {\r\n                this._prevActData.ag.stop();\r\n            } else {\r\n                //this._scene.stopAnimation(this._skeleton, this._prevActData.name);\r\n                this._scene.stopAnimation(this._skeleton);\r\n                //this._scene.stopAllAnimations();\r\n            }\r\n            //stop current sound\r\n            if (this._prevActData.sound != null) {\r\n                this._prevActData.sound.stop();\r\n            }\r\n            clearInterval(this._sndId);\r\n\r\n            this._scene.unregisterBeforeRender(this._renderer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * use resumeAnim to resume the character controller playing\r\n     * animations on the character.\r\n     * see also pauseAnim()\r\n     */\r\n    public resumeAnim() {\r\n        this._stopAnim = false;\r\n        this._prevActData = null;\r\n        this._scene.registerBeforeRender(this._renderer);\r\n    }\r\n\r\n    private _prevActData: ActionData = null;\r\n    private _avStartPos: Vector3 = Vector3.Zero();\r\n    private _prevPickY: number = 0;\r\n    private _grounded: boolean = false;\r\n    //distance by which AV would move down if in freefall\r\n    private _freeFallDist: number = 0;\r\n\r\n    private _inFreeFall: boolean = false;\r\n    private _wasWalking: boolean = false;\r\n    private _wasRunning: boolean = false;\r\n    private _moveVector: Vector3 = Vector3.Zero();\r\n\r\n    //used only in mode 1\r\n    //value 1 or -1 , -1 if avatar is facing camera\r\n    //private _notFacingCamera = 1;\r\n\r\n    private _isAvFacingCamera(): number {\r\n        if (!this._hasCam) return 1;\r\n        if (Vector3.Dot(this._avatar.forward, this._avatar.position.subtract(this._camera.position)) < 0) return 1\r\n        else return -1;\r\n    }\r\n\r\n    private _moveAVandCamera() {\r\n        this._avStartPos.copyFrom(this._avatar.position);\r\n        let actData: ActionData = null;\r\n        const dt: number = this._scene.getEngine().getDeltaTime() / 1000;\r\n\r\n        if (this._act._jump && !this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            actData = this._doJump(dt);\r\n        } else if (this.anyMovement() || this._inFreeFall) {\r\n            this._grounded = false;\r\n            this._idleFallTime = 0;\r\n            actData = this._doMove(dt);\r\n        } else if (!this._inFreeFall) {\r\n            actData = this._doIdle(dt);\r\n        }\r\n\r\n        if (!this._stopAnim && this._hasAnims && actData != null) {\r\n            // console.log(\"anim: \" + actData.name);\r\n            if (this._prevActData !== actData) {\r\n                if (actData.exist) {\r\n\r\n                    //animation frame counts\r\n                    let c: number;\r\n                    let fps: number = 30;\r\n\r\n                    if (this._isAG) {\r\n                        if (this._prevActData != null && this._prevActData.exist) this._prevActData.ag.stop();\r\n                        actData.ag.start(actData.loop, actData.rate);\r\n                        fps = actData.ag.targetedAnimations[0].animation.framePerSecond;\r\n                        c = (actData.ag.to - actData.ag.from);\r\n                    } else {\r\n                        let a: Animatable = this._skeleton.beginAnimation(actData.name, actData.loop, actData.rate);\r\n                        fps = a.getAnimations()[0].animation.framePerSecond;\r\n                        c = this._skeleton.getAnimationRange(actData.name).to - this._skeleton.getAnimationRange(actData.name).from;\r\n                    }\r\n\r\n                    //SOUND\r\n                    //TODO do sound as animationevent.\r\n                    if (this._prevActData != null && this._prevActData.sound != null) {\r\n                        this._prevActData.sound.stop();\r\n                    }\r\n                    clearInterval(this._sndId);\r\n                    if (actData.sound != null) {\r\n                        actData.sound.play();\r\n                        //play sound twice during the animation\r\n                        this._sndId = setInterval(() => { actData.sound.play(); }, c * 1000 / (fps * Math.abs(actData.rate) * 2));\r\n                    }\r\n                }\r\n                this._prevActData = actData;\r\n            }\r\n        }\r\n        this._updateTargetValue();\r\n        return;\r\n    }\r\n\r\n    private _soundLoopTime = 700;\r\n    private _sndId = null;\r\n\r\n    //verical position of AV when it is about to start a jump\r\n    private _jumpStartPosY: number = 0;\r\n    //for how long the AV has been in the jump\r\n    private _jumpTime: number = 0;\r\n    private _doJump(dt: number): ActionData {\r\n\r\n        let actData: ActionData = null;\r\n        actData = this._actionMap.runJump;\r\n        if (this._jumpTime === 0) {\r\n            this._jumpStartPosY = this._avatar.position.y;\r\n        }\r\n\r\n        this._jumpTime = this._jumpTime + dt;\r\n\r\n        let forwardDist: number = 0;\r\n        let jumpDist: number = 0;\r\n        let disp: Vector3;\r\n\r\n        // if (this._hasCam && this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        if (this._wasRunning || this._wasWalking) {\r\n            if (this._wasRunning) {\r\n                forwardDist = this._actionMap.run.speed * dt;\r\n            } else if (this._wasWalking) {\r\n                forwardDist = this._actionMap.walk.speed * dt;\r\n            }\r\n            //find out in which horizontal direction the AV was moving when it started the jump\r\n            disp = this._moveVector.clone();\r\n            disp.y = 0;\r\n            disp = disp.normalize();\r\n            disp.scaleToRef(forwardDist, disp);\r\n            jumpDist = this._calcJumpDist(this._actionMap.runJump.speed, dt);\r\n            disp.y = jumpDist;\r\n        } else {\r\n            jumpDist = this._calcJumpDist(this._actionMap.idleJump.speed, dt);\r\n            disp = new Vector3(0, jumpDist, 0);\r\n            actData = this._actionMap.idleJump;\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y/2;\r\n        }\r\n        //moveWithCollision only seems to happen if length of displacment is atleast 0.001\r\n        this._avatar.moveWithCollisions(disp);\r\n        if (jumpDist < 0) {\r\n            //this.avatar.ellipsoid.y=this._ellipsoid.y;\r\n            //check if going up a slope or back on flat ground \r\n            if ((this._avatar.position.y > this._avStartPos.y) || ((this._avatar.position.y === this._avStartPos.y) && (disp.length() > 0.001))) {\r\n                this._endJump();\r\n            } else if (this._avatar.position.y < this._jumpStartPosY) {\r\n                //the avatar is below the point from where it started the jump\r\n                //so it is either in free fall or is sliding along a downward slope\r\n                //\r\n                //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n                //else it is on a slope\r\n                const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n                if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                    //AV is on slope\r\n                    //Should AV continue to slide or stop?\r\n                    //if slope is less steeper than acceptable then stop else slide\r\n                    let _ng = this._isNearGround(actDisp);\r\n                    if (_ng.slope <= this._sl1) {\r\n                        this._endJump();\r\n                    }\r\n                } else {\r\n                    actData = this._actionMap.fall;\r\n                }\r\n            }\r\n        }\r\n        return actData;\r\n    }\r\n\r\n    private _calcJumpDist(speed: number, dt: number): number {\r\n        //up velocity at the begining of the last frame (v=u+at)\r\n        let js: number = speed - this._gravity * this._jumpTime;\r\n        //distance travelled up since last frame to this frame (s=ut+1/2*at^2)\r\n        let jumpDist: number = js * dt - 0.5 * this._gravity * dt * dt;\r\n        return jumpDist;\r\n    }\r\n\r\n    /**\r\n     * does cleanup at the end of a jump\r\n     */\r\n    private _endJump() {\r\n        this._act._jump = false;\r\n        this._jumpTime = 0;\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n    }\r\n\r\n    /**\r\n     * checks if two vectors v1 and v2 are equal within a precision of p\r\n     */\r\n    private _areVectorsEqual(v1: Vector3, v2: Vector3, p: number) {\r\n        return ((Math.abs(v1.x - v2.x) < p) && (Math.abs(v1.y - v2.y) < p) && (Math.abs(v1.z - v2.z) < p));\r\n    }\r\n\r\n    /*\r\n     * returns the slope (in radians) of a vector in the vertical plane\r\n     */\r\n    private _verticalSlope(v: Vector3): number {\r\n        return Math.atan(Math.abs(v.y / Math.sqrt(v.x * v.x + v.z * v.z)));\r\n    }\r\n\r\n    //for how long has the av been falling while moving\r\n    private _movFallTime: number = 0;\r\n    private _sign = 1;\r\n    private _isTurning = false;\r\n    private _noRot = false;\r\n    private _steps = true;\r\n    private _stepHigh:boolean = false;\r\n    private _doMove(dt: number): ActionData {\r\n        // console.log(\"doMove\");\r\n\r\n        //initial down velocity (v=u+at)\r\n        const u: number =  this._gravity * this._movFallTime ;\r\n\r\n        //calculate the distance by which av should move down since last frame\r\n        //s=ut+att/2\r\n        this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n\r\n        this._movFallTime = this._movFallTime + dt;\r\n\r\n        let moving: boolean = false;\r\n        let actdata: ActionData = null;\r\n\r\n        this._moveVector.x=0;\r\n        this._moveVector.y=0;\r\n        this._moveVector.z=0;\r\n\r\n        if (this._inFreeFall) {\r\n            this._moveVector.y = -this._freeFallDist;\r\n            moving = true;\r\n        }\r\n\r\n\r\n        //rotate avatar with respect to camera direction. \r\n        this._rotateAV2C();\r\n\r\n        //rotate the avatar in case player is trying to rotate the avatar. rotate the camera too if camera turning is on\r\n        actdata = this._rotateAVnC(actdata, moving, dt);\r\n\r\n        //now that avatar is rotated properly, construct the vector to move the avatar \r\n        //donot move the avatar if avatar is in freefall\r\n\r\n        if (!this._inFreeFall) {\r\n            this._wasWalking = false;\r\n            this._wasRunning = false;\r\n\r\n            let sign: number;\r\n            let horizDist: number = 0;\r\n            switch (true) {\r\n                case (this._act._stepLeft):\r\n                    // console.log(\"step left\");\r\n                    sign = this._signLHS_RHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeLeft.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeLeftFast.speed * dt;\r\n                        actdata = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        actdata = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._stepRight):\r\n                    // console.log(\"step right\");\r\n                    sign = -this._signLHS_RHS * this._isAvFacingCamera();\r\n                    horizDist = this._actionMap.strafeRight.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.strafeRightFast.speed * dt;\r\n                        actdata = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeftFast : this._actionMap.strafeRightFast;\r\n                    } else {\r\n                        actdata = (-this._ffSign * sign > 0) ? this._actionMap.strafeLeft : this._actionMap.strafeRight;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(sign * horizDist, -this._freeFallDist, 0);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walk || (this._noRot && this._mode == 0)):\r\n                    // console.log(\"walk\");\r\n                    if (this._act._speedMod) {\r\n                        this._wasRunning = true;\r\n                        horizDist = this._actionMap.run.speed * dt;\r\n                        actdata = this._actionMap.run;\r\n                    } else {\r\n                        this._wasWalking = true;\r\n                        horizDist = this._actionMap.walk.speed * dt;\r\n                        actdata = this._actionMap.walk;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n                case (this._act._walkback):\r\n                    // console.log(\"walk back\");\r\n                    horizDist = this._actionMap.walkBack.speed * dt;\r\n                    if (this._act._speedMod) {\r\n                        horizDist = this._actionMap.walkBackFast.speed * dt;\r\n                        actdata = this._actionMap.walkBackFast;\r\n                    } else {\r\n                        actdata = this._actionMap.walkBack;\r\n                    }\r\n                    this._moveVector = this._avatar.calcMovePOV(0, -this._freeFallDist, -this._ffSign * horizDist);\r\n                    moving = true;\r\n                    break;\r\n            }\r\n        }\r\n\r\n        // move the avatar\r\n        if (moving) {\r\n            if (this._moveVector.length() > 0.001) {\r\n                this._avatar.moveWithCollisions(this._moveVector);\r\n\r\n                let actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n\r\n                const _ng = this._isNearGround(actDisp);\r\n\r\n                //walking up a step or a  slope\r\n                if (this._avatar.position.y - this._avStartPos.y > 0.01) {\r\n                //if (this._avatar.position.y > this._avStartPos.y) {\r\n                    //if AV is going up even though slope is 0 then that means AV is trying to climb steps\r\n                    //The elliptical shape of ellipsoid allows this.\r\n                    if (_ng.hit && _ng.slope == 0 ) {\r\n                        //if user has specified step offset then prevent AV from going beyond that\r\n                        //otherwise allow whatever the ellisoid allows\r\n                        if (this._stepOffset > 0) {\r\n\r\n                            //The pick ray being in front, will pick a step and \r\n                            //thus can be used to calc the step height\r\n                            let stepHeight = _ng.y - this._avStartPos.y;\r\n\r\n                            //if the step height is more than that allowed\r\n                            if (stepHeight > this._stepOffset) {\r\n                                this._stepHigh = true;\r\n                            }else{\r\n                                this._stepHigh = false;\r\n                            }\r\n\r\n                            //if the total amount by which the AV has moved up exceeds the allowable limit then\r\n                            //move av back to its position at begining of steps\r\n                             if (this._stepHigh) {\r\n                                //move av back to its position at begining of steps\r\n                                this._avatar.position.copyFrom(this._avStartPos);\r\n                            }else{\r\n                                this._avatar.position.y = _ng.y;\r\n                                this._movFallTime = 0;\r\n                            }\r\n                         }\r\n                    } else {\r\n                        //looks like the avatar is going up a slope\r\n                        const _slp = _ng.slope;\r\n\r\n                        //if slope is less than the higher slope limit then continue moving up\r\n                        //if slope is greater than the higher slope limit then stop moving up\r\n                        //\r\n                        //But sometimes even if the the slope is greater than the higher slope limit \r\n                        //we may want avatar to continue moving up the slope.\r\n                        //Remember that the the ray is in front of the avatar (when the avatar is facing the slope).\r\n                        //Thus the slope read, is not the slope of the ground under the avatar but of ground in front of the avatar.\r\n                        //Now the ground in front can suddenly start sloping down more than allowable limit.\r\n                        //In that case the avatar should not stop but continue moving forward.\r\n                        //To identify this use case we need to check if the current pickpoint is below the previous pickpoint.\r\n                        //Normally if we are going up the slope then the current pickpoint\r\n                        //should always be above the previous pickpoint.\r\n                        //If this is not the case then we have identifed this use case of a downward slope ahead.\r\n                        //Note: the slope does not tell us if it is a upward slope or a downward slope\r\n\r\n                        if (_slp >= this._sl2 && _ng.y > this._prevPickY) {\r\n                       // if (_slp >= this._sl2 ) {\r\n                            //move av back to old position\r\n                            this._avatar.position.copyFrom(this._avStartPos);\r\n                            this._endFreeFall();\r\n                            this._prevPickY = 0;\r\n                        } else {\r\n                            //keep moving up the slope\r\n                            this._prevPickY = _ng.y;\r\n                            if (_slp > this._sl1) {\r\n                                //av is on a steep slope , continue increasing the moveFallTIme to deaccelerate it\r\n                                this._inFreeFall = false;\r\n                            } else {\r\n                                //continue walking\r\n                                this._endFreeFall();\r\n                            }\r\n                        }\r\n                    }\r\n                   \r\n                } else if ( this._avatar.position.y < this._avStartPos.y ) {\r\n                    // if (this._avStartPos.y - this._avatar.position.y > 0.01 ) {\r\n                    //av is going down a slope or is in free fall\r\n                    const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n\r\n                    //if the AV falls by an amount equal to the free fall distance calculated then it is in freefall\r\n                    //Now the AV could be going down a slope but still be seen as if it is in a freefall.\r\n                    //This could happen if the AV is going down a steep fall. In such cases the AV move forward, \r\n                    // goes in freefall,hits the slope,goes in freefall again and so on\r\n                    //To make sure this is not the case check the pickray does not hit the ground or if it does then \r\n                    // the pickpoint is atleast 1 unit(?) below the avatar's position\r\n                    //if (this._areVectorsEqual(actDisp, this._moveVector, 0.001) &&  (!_ng.hit || (_ng.hit && this._avatar.position.y - _ng.y > 1))) {\r\n                    if (this._areVectorsEqual(actDisp, this._moveVector, 0.001) &&  !_ng.hit) {\r\n                        //AV is in freefall\r\n                        this._inFreeFall = true;\r\n                        actdata = this._actionMap.fall;\r\n                    }else {\r\n                          //if (_ng.y >= this._avatar.position.y) {\r\n                        //AV is on ground and thus on slope\r\n                        //\r\n                        //Should AV continue to slide or walk?\r\n                        //if slope is less steeper than acceptable then walk else slide\r\n                        //if (this._verticalSlope(actDisp) <= this._sl1) {\r\n                            if (_ng.slope <= this._sl1) {\r\n                               // this._endFreeFall();\r\n                                this._inFreeFall = false;\r\n                            } else {\r\n                                //av is on a steep slope , keep the moveFallTIme non zero to continue deaccelerate it vertically\r\n                                this._inFreeFall = false;\r\n                            }\r\n                    }\r\n                } else {\r\n                    //AV is walking on a flat surface\r\n                    //this._endFreeFall();\r\n                    this._inFreeFall = false;\r\n                }\r\n            }\r\n        }\r\n        return actdata;\r\n    }\r\n\r\n\r\n\r\n    //check if any collidable mesh is just below the avatar's ellipsoid\r\n    private _isNearGround(actDisp: Vector3): { \"name\": string, \"ground\": boolean, \"slope\": number,\"y\":number,\"hit\":boolean } {\r\n\r\n        let upDist = this._avatar.position.y - this._avStartPos.y;\r\n        let up:boolean = true;\r\n        if (Math.abs(upDist) < 0.006) { \r\n            up = true;\r\n        }else{\r\n            up = (upDist > 0.01 ) ? true : false;\r\n        }\r\n        let fwd: boolean;\r\n        actDisp.y = 0;\r\n        if (actDisp.x == 0 && actDisp.z == 0) {\r\n            fwd = true;\r\n        } else {\r\n            let cosTheta = Vector3.Dot(this._avatar.forward, actDisp.normalize());\r\n            fwd = (cosTheta >= 0) ? true : false;\r\n        }\r\n        let fact = (up && fwd) || (!up && !fwd) ? 1 : -1;\r\n\r\n        //SAT DEBUG\r\n        // fact=1;\r\n\r\n        // send the pick ray vertically down starting from a pont which is\r\n        // a) in the middle of the ellipsoid  and\r\n        // b) either front or back of the avatar\r\n        // if AV is moving forward and up (in otherwords facing the slope) then ray in front\r\n        // if AV is moving backward and down (in otherwords facing the slope) then ray in front\r\n        // if AV is moving forward and down (in otherwords facing away from the slope) then ray in back\r\n        // if AV is moving backward and  up (in otherwords facing away from the slope) then ray in back\r\n        // This way the ray is targetting a point on the ground which is slightly above the avatar feet thus \r\n        // ensuring that the ray will always hit the ground.\r\n        // The length of the ray is such that it atleast reaches the bottom of the avator.\r\n\r\n        this._avatar.forward.scaleToRef(this._avatar.ellipsoid.x * fact, this._ray.origin);\r\n        this._ray.origin.addToRef(this._avatar.position, this._ray.origin);\r\n        this._ray.origin.addToRef(this._avatar.ellipsoidOffset, this._ray.origin);\r\n        //this._avatar.position.addToRef(this._avatar.ellipsoidOffset, this._ray.origin);\r\n        //this._ray.origin.y = this._ray.origin.y - this._avatar.ellipsoid.y;\r\n        //from the bottom of ellipsoid go down 1/4 the ellipsoid height to check for any mesh\r\n        //this._ray.length = this._avatar.ellipsoid.y + this._stepOffset;\r\n        this._ray.length = this._avatar.ellipsoid.y *2;\r\n        //direction is towards the bottom\r\n        this._ray.direction = this._down;\r\n\r\n        //draw pick ray\r\n        if (this._ellipsoid !=null) {\r\n            this._drawLines(this._ray.origin, this._ray.origin.add(new Vector3(0, -this._ray.length, 0)));\r\n        }\r\n\r\n        \r\n        //handle case were pick is with a child of avatar, avatar atatchment. etc\r\n        //check if any collidable mesh is there just below the avatar's ellipsoid\r\n        const pi: PickingInfo = this._scene.pickWithRay(this._ray, (mesh) => {\r\n            if (this._avChildren.includes(mesh)) return false;\r\n            if (mesh.checkCollisions) return true;\r\n            return false;\r\n        });\r\n\r\n        if (pi != null && pi.hit) {\r\n            let n: Vector3 = pi.getNormal(true, true);\r\n            let slope: number = Math.PI / 2 - Math.asin(Math.abs(n.y));\r\n            return { \"name\": pi.pickedMesh.name, \"ground\": true, \"slope\": slope, \"y\":pi.pickedPoint.y, \"hit\":true };\r\n        }\r\n        else return { \"name\": \"\", \"ground\": false, \"slope\": 0, \"y\":0, \"hit\":false };\r\n\r\n    }\r\n\r\n\r\n    //check if any collidable mesh is just below the avatar's ellipsoid\r\n    private _isNearGround_old(): { \"name\": string, \"ground\": boolean, \"slope\": number } {\r\n        //start the ray from the bottom of avatar's ellipsod\r\n        //ellipsoid center = avatar position + ellipsoid offset\r\n        //ellipsoid bottom = ellipsoid center - ellipsoid height \r\n        this._avatar.position.addToRef(this._avatar.ellipsoidOffset, this._ray.origin);\r\n        this._ray.origin.y = this._ray.origin.y - this._avatar.ellipsoid.y;\r\n        //from the bottom of ellipsoid go down 1/4 the ellipsoid height to check for any mesh\r\n        this._ray.length = this._avatar.ellipsoid.y / 2;\r\n        //direction is towards the bottom\r\n        this._ray.direction = this._down;\r\n\r\n\r\n\r\n        //TODO \r\n        //handle case were pick is with a child of avatar, avatar atatchment. etc\r\n        //check if any collidable mesh is there just below the avatar's ellipsoid\r\n        const pis: PickingInfo[] = this._scene.multiPickWithRay(this._ray, (mesh) => {\r\n            if (mesh == this._avatar) return false;\r\n            if (mesh.checkCollisions) return true\r\n            else return false;\r\n        });\r\n\r\n        if (pis.length > 0) {\r\n            let pi: PickingInfo = pis[0];\r\n\r\n            let n: Vector3 = pi.getNormal(true, true);\r\n            let slope: number = Math.PI / 2 - Math.asin(Math.abs(n.y));\r\n\r\n            return { \"name\": pi.pickedMesh.name, \"ground\": true, \"slope\": slope };\r\n        }\r\n        else return { \"name\": \"\", \"ground\": false, \"slope\": 0 };\r\n\r\n    }\r\n\r\n\r\n    //for debugging purpose draws the rayline use to detect slope or steps\r\n    _rayLine: LinesMesh = null;\r\n    _lineOptions:any = {};\r\n    private _drawLines(pt1: Vector3, pt2: Vector3) {\r\n        if (this._rayLine == null){\r\n            const myPoints = [pt1, pt2];\r\n            this._lineOptions = {\r\n                points: myPoints,\r\n                updatable: true\r\n            }\r\n            this._rayLine = MeshBuilder.CreateLines(\"lines\", this._lineOptions );\r\n        }else {\r\n            this._lineOptions.points[0]=pt1;\r\n            this._lineOptions.points[1]=pt2;\r\n            this._lineOptions.instance = this._rayLine;\r\n            this._rayLine = MeshBuilder.CreateLines(\"lines\", this._lineOptions);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * rotate avatar with respect to camera direction. \r\n     */\r\n    private _rotateAV2C() {\r\n        if (this._hasCam)\r\n            if (this._mode != 1) {\r\n                let ca = (this._hasCam) ? (this._av2cam - this._camera.alpha) : 0;\r\n                if (this._noRot) {\r\n                    switch (true) {\r\n                        case (this._act._walk && this._act._turnRight):\r\n                            this._avatar.rotation.y = ca + this._rhsSign * Math.PI / 4;\r\n                            break;\r\n                        case (this._act._walk && this._act._turnLeft):\r\n                            this._avatar.rotation.y = ca - this._rhsSign * Math.PI / 4;\r\n                            break;\r\n                        case (this._act._walkback && this._act._turnRight):\r\n                            this._avatar.rotation.y = ca + this._rhsSign * 3 * Math.PI / 4;\r\n                            break;\r\n                        case (this._act._walkback && this._act._turnLeft):\r\n                            this._avatar.rotation.y = ca - this._rhsSign * 3 * Math.PI / 4;\r\n                            break;\r\n                        case (this._act._walk):\r\n                            this._avatar.rotation.y = ca;\r\n                            break;\r\n                        case (this._act._walkback):\r\n                            this._avatar.rotation.y = ca + Math.PI;\r\n                            break;\r\n                        case (this._act._turnRight):\r\n                            this._avatar.rotation.y = ca + this._rhsSign * Math.PI / 2;\r\n                            break;\r\n                        case (this._act._turnLeft):\r\n                            this._avatar.rotation.y = ca - this._rhsSign * Math.PI / 2;\r\n                            break;\r\n                    }\r\n                } else {\r\n                    if (this._hasCam)\r\n                        this._avatar.rotation.y = ca;\r\n                }\r\n            }\r\n    }\r\n\r\n    //rotate the avatar in case player is trying to rotate the avatar. rotate the camera too if camera turning is on\r\n    private _rotateAVnC(anim: ActionData, moving: boolean, dt: number): ActionData {\r\n        if (!(this._noRot && this._mode == 0) && (!this._act._stepLeft && !this._act._stepRight) && (this._act._turnLeft || this._act._turnRight)) {\r\n            let turnAngle = this._actionMap.turnLeft.speed * dt;\r\n            if (this._act._speedMod) {\r\n                turnAngle = 2 * turnAngle;\r\n            }\r\n            let a;\r\n            if (this._mode == 1) {\r\n                // while turining, the avatar could start facing away from camera and end up facing camera.\r\n                // we should not switch turning direction during this transition\r\n                if (!this._isTurning) {\r\n                    // if (this._act.name != this._act.prevName) {\r\n                    // this._act.prevName = this._act.name;\r\n                    this._sign = -this._ffSign * this._isAvFacingCamera();\r\n                    if (this._isLHS_RHS) this._sign = - this._sign;\r\n                    this._isTurning = true;\r\n                }\r\n                a = this._sign;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walk) { }\r\n                    else if (this._act._walkback) a = -this._sign;\r\n                    else {\r\n                        anim = (this._sign > 0) ? this._actionMap.turnRight : this._actionMap.turnLeft;\r\n                    }\r\n                } else {\r\n                    if (this._act._walk) a = -this._sign;\r\n                    else if (this._act._walkback) { }\r\n                    else {\r\n                        a = -this._sign;\r\n                        anim = (this._sign > 0) ? this._actionMap.turnLeft : this._actionMap.turnRight;\r\n                    }\r\n                }\r\n            } else {\r\n                a = 1;\r\n                if (this._act._turnLeft) {\r\n                    if (this._act._walkback) a = -1;\r\n                    if (!moving) anim = this._actionMap.turnLeft;\r\n                } else {\r\n                    if (this._act._walk) a = -1;\r\n                    if (!moving) { a = -1; anim = this._actionMap.turnRight; }\r\n                }\r\n                if (this._hasCam)\r\n                    this._camera.alpha = this._camera.alpha + this._rhsSign * turnAngle * a;\r\n            }\r\n\r\n            this._avatar.rotation.y = this._avatar.rotation.y + turnAngle * a;\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _endFreeFall(): void {\r\n        this._movFallTime = 0;\r\n        this._inFreeFall = false;\r\n    }\r\n\r\n    //for how long has the av been falling while idle (not moving)\r\n    private _idleFallTime: number = 0;\r\n    private _doIdle(dt: number): ActionData {\r\n        if (this._grounded) {\r\n            return this._actionMap.idle;\r\n        }\r\n        this._wasWalking = false;\r\n        this._wasRunning = false;\r\n        this._movFallTime = 0;\r\n        let anim: ActionData = this._actionMap.idle;\r\n\r\n        if (dt === 0) {\r\n            this._freeFallDist = 5;\r\n        } else {\r\n            const u: number = this._idleFallTime * this._gravity\r\n            this._freeFallDist = u * dt + this._gravity * dt * dt / 2;\r\n            this._idleFallTime = this._idleFallTime + dt;\r\n        }\r\n        //if displacement is less than 0.01(? need to verify further) then \r\n        //moveWithDisplacement down against a surface seems to push the AV up by a small amount!!\r\n        if (this._freeFallDist < 0.01) return anim;\r\n        const disp: Vector3 = new Vector3(0, -this._freeFallDist, 0);\r\n        // if (this._hasCam && this._mode != 1 && !this._noRot) this._avatar.rotation.y = this._av2cam - this._camera.alpha;\r\n        this._avatar.moveWithCollisions(disp);\r\n        if ((this._avatar.position.y > this._avStartPos.y) || (this._avatar.position.y === this._avStartPos.y)) {\r\n            //                this.grounded = true;\r\n            //                this.idleFallTime = 0;\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            let ng = this._isNearGround(actDisp);\r\n            //if (this._verticalSlope(actDisp) <= this._sl1) {\r\n            if (ng.slope <= this._sl1) {\r\n                this._groundIt();\r\n                this._avatar.position.copyFrom(this._avStartPos);\r\n            } else {\r\n                this._unGroundIt();\r\n                anim = this._actionMap.slideBack;\r\n            }\r\n\r\n            //this._groundIt();\r\n        } else if (this._avatar.position.y < this._avStartPos.y) {\r\n            //AV is going down. \r\n            //AV is either in free fall or is sliding along a downward slope\r\n            //\r\n            //if the actual displacemnt is same as the desired displacement then AV is in freefall\r\n            //else it is on a slope\r\n            const actDisp: Vector3 = this._avatar.position.subtract(this._avStartPos);\r\n            if (!(this._areVectorsEqual(actDisp, disp, 0.001))) {\r\n                //AV is on slope\r\n                //Should AV continue to slide or stop?\r\n                //if slope is less steeper than accebtable then stop else slide\r\n                let ng = this._isNearGround(actDisp);\r\n                if (ng.slope <= this._sl1) {\r\n                    this._groundIt();\r\n                    this._avatar.position.copyFrom(this._avStartPos);\r\n                } else {\r\n                    this._unGroundIt();\r\n                    anim = this._actionMap.slideBack;\r\n                }\r\n            } else {\r\n                anim = this._actionMap.fall;\r\n            }\r\n        }\r\n        return anim;\r\n    }\r\n\r\n    private _groundFrameCount = 0;\r\n    private _groundFrameMax = 10;\r\n    /**\r\n     * donot ground immediately\r\n     * wait few more frames\r\n     */\r\n    private _groundIt(): void {\r\n        this._groundFrameCount++;\r\n        if (this._groundFrameCount > this._groundFrameMax) {\r\n            this._grounded = true;\r\n            this._idleFallTime = 0;\r\n        }\r\n    }\r\n    private _unGroundIt() {\r\n        this._grounded = false;\r\n        this._groundFrameCount = 0;\r\n    }\r\n\r\n    private _savedCameraCollision: boolean = true;\r\n    private _inFP = false;\r\n    private _updateTargetValue() {\r\n        if (!this._hasCam) return;\r\n      \r\n        this._avatar.position.addToRef(this._cameraTarget, this._camera.target);\r\n\r\n        if (this._camera.radius > this._camera.lowerRadiusLimit) { if (this._cameraElastic || this._makeInvisible) this._handleObstruction(); }\r\n\r\n        //if user so desire, make the AV invisible if camera comes close to it\r\n        if (this._camera.radius <= this._camera.lowerRadiusLimit) {\r\n            if (!this._noFirstPerson && !this._inFP) {\r\n                this._makeMeshInvisible(this._avatar);\r\n                this._camera.checkCollisions = false;\r\n                this._saveMode = this._mode;\r\n                this._mode = 0;\r\n                this._inFP = true;\r\n            }\r\n        } else {\r\n            if (this._inFP) {\r\n                this._inFP = false;\r\n                this._mode = this._saveMode;\r\n                this._restoreVisiblity(this._avatar);\r\n                this._camera.checkCollisions = this._savedCameraCollision;\r\n            }\r\n        }\r\n    }\r\n\r\n    // make mesh and all its children invisible\r\n    // store their current visibility state so that we can restore them later on\r\n    private _makeMeshInvisible(mesh: Mesh) {\r\n\r\n        this._visiblityMap.set(mesh, mesh.visibility);\r\n        mesh.visibility = 0;\r\n\r\n        mesh.getChildMeshes(false, (n) => {\r\n            if (n instanceof Mesh) {\r\n                this._visiblityMap.set(n, n.visibility);\r\n                n.visibility = 0;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n\r\n    private _visiblityMap: Map<Mesh, int> = new Map();\r\n\r\n    //restore mesh visibility to previous state\r\n    private _restoreVisiblity(mesh: Mesh) {\r\n        mesh.visibility = this._visiblityMap.get(mesh);\r\n        mesh.getChildMeshes(false, (n) => {\r\n            if (n instanceof Mesh) n.visibility = this._visiblityMap.get(n);\r\n            return false;\r\n        });\r\n    }\r\n\r\n    private _ray: Ray = new Ray(Vector3.Zero(), Vector3.One(), 1);\r\n    private _rayDir: Vector3 = Vector3.Zero();\r\n    //camera seems to get stuck into things\r\n    //should move camera away from things by a value of cameraSkin\r\n    private _cameraSkin: number = 0.5;\r\n    private _prevPickedMeshes: AbstractMesh[];\r\n    private _pickedMeshes: AbstractMesh[] = new Array();;\r\n    private _makeInvisible = false;\r\n    private _elasticSteps = 50;\r\n    private _alreadyInvisible: AbstractMesh[];\r\n\r\n    /**\r\n     * The following method handles the use case wherein some mesh\r\n     * comes between the avatar and the camera thus obstructing the view\r\n     * of the avatar.\r\n     * Two ways this can be handled\r\n     * a) make the obstructing  mesh invisible\r\n     *   instead of invisible a better option would have been to make semi transparent.\r\n     *   Unfortunately, unlike mesh, mesh instances do not \"visibility\" setting)\r\n     *   Every alternate frame make mesh visible and invisible to give the impression of semi-transparent.\r\n     * b) move the camera in front of the obstructing mesh\r\n     */\r\n    private _handleObstruction() {\r\n\r\n        //get vector from av (camera.target) to camera\r\n        this._camera.position.subtractToRef(this._camera.target, this._rayDir);\r\n        //start ray from av to camera\r\n        this._ray.origin = this._camera.target;\r\n        this._ray.length = this._rayDir.length();\r\n        this._ray.direction = this._rayDir.normalize();\r\n\r\n\r\n        //do not pick a mesh if it is the avatar or any of its children (like attachments etc)\r\n        const pis: PickingInfo[] = this._scene.multiPickWithRay(this._ray, (mesh) => {\r\n            if (this._avChildren.includes(mesh)) return false;\r\n            if (mesh.isPickable) {\r\n                return true;\r\n            }else{ \r\n                return false;\r\n            }\r\n        });\r\n\r\n\r\n        if (this._makeInvisible) {\r\n            this._prevPickedMeshes = this._pickedMeshes;\r\n            if (pis.length > 0) {\r\n                this._pickedMeshes = new Array();\r\n                for (let pi of pis) {\r\n                    if (pi.pickedMesh.isVisible || this._prevPickedMeshes.includes(pi.pickedMesh)) {\r\n                        pi.pickedMesh.isVisible = false;\r\n                        this._pickedMeshes.push(pi.pickedMesh);\r\n                    }\r\n                }\r\n                for (let pm of this._prevPickedMeshes) {\r\n                    if (!this._pickedMeshes.includes(pm)) {\r\n                        pm.isVisible = true;\r\n                    }\r\n                }\r\n            } else {\r\n                for (let pm of this._prevPickedMeshes) {\r\n                    pm.isVisible = true;\r\n                }\r\n                this._prevPickedMeshes.length = 0;\r\n            }\r\n        }\r\n\r\n        if (this._cameraElastic) {\r\n            if (pis.length > 0) {\r\n                // postion the camera in front of the mesh that is obstructing camera\r\n\r\n                //if only one obstruction and it is invisible then if it is not collidable or our camera is not collidable then do nothing\r\n                if ((pis.length == 1 && !this._isSeeAble(pis[0].pickedMesh)) && (!pis[0].pickedMesh.checkCollisions || !this._camera.checkCollisions)) return;\r\n\r\n                //if our camera is collidable then we donot want it to get stuck behind another collidable obsrtucting mesh\r\n                let pp: Vector3 = null;\r\n\r\n                //we will asume the order of picked meshes is from closest to avatar to furthest\r\n                //we should get the first one which is visible or invisible and collidable\r\n                for (let i = 0; i < pis.length; i++) {\r\n                    let pm = pis[i].pickedMesh;\r\n                    if (this._isSeeAble(pm)) {\r\n                        pp = pis[i].pickedPoint;\r\n                        break;\r\n                    } else if (pm.checkCollisions) {\r\n                        pp = pis[i].pickedPoint;\r\n                        break;\r\n                    }\r\n                }\r\n                if (pp == null) return;\r\n\r\n                const c2p: Vector3 = this._camera.position.subtract(pp);\r\n                //note that when camera is collidable, changing the orbital camera radius may not work.\r\n                //changing the radius moves the camera forward (with collision?) and collision can interfere with movement\r\n                //\r\n                //in every cylce we are dividing the distance to tarvel by same number of steps.\r\n                //as we get closer to destination the speed will thus slow down.\r\n                //when just 1 unit distance left, lets snap to the final position.\r\n                //when calculating final position make sure the camera does not get stuck at the pickposition especially\r\n                //if collision is on\r\n\r\n                const l: number = c2p.length();\r\n                if (this._camera.checkCollisions) {\r\n                    let step: Vector3;\r\n                    if (l <= 1) {\r\n                        step = c2p.addInPlace(c2p.normalizeToNew().scaleInPlace(this._cameraSkin));\r\n                    } else {\r\n                        step = c2p.normalize().scaleInPlace(l / this._elasticSteps);\r\n                    }\r\n                    this._camera.position = this._camera.position.subtract(step);\r\n                } else {\r\n                    let step: number;\r\n                    if (l <= 1) step = l + this._cameraSkin; else step = l / this._elasticSteps;\r\n                    this._camera.radius = this._camera.radius - (step);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //how many ways can a mesh be invisible?\r\n    private _isSeeAble(mesh: AbstractMesh): boolean {\r\n        if (!mesh.isVisible) return false;\r\n        if (mesh.visibility == 0) return false;\r\n        if (mesh.material != null && mesh.material.alphaMode != 0 && mesh.material.alpha == 0) return false;\r\n        return true;\r\n        //what about vertex color? groan!\r\n    }\r\n\r\n\r\n    private _move: boolean = false;\r\n    public anyMovement(): boolean {\r\n        return (this._act._walk || this._act._walkback || this._act._turnLeft || this._act._turnRight || this._act._stepLeft || this._act._stepRight);\r\n    }\r\n\r\n    private _onKeyDown(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        if (e.repeat) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case this._actionMap.idleJump.key:\r\n                this._act._jump = true;\r\n                break;\r\n            case \"capslock\":\r\n                this._act._speedMod = !this._act._speedMod;\r\n                break;\r\n            case \"shift\":\r\n                this._act._speedMod = true;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                // console.log(\"walk\");\r\n                this._act._walk = true;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                // console.log(\"turn left\");\r\n                this._act._turnLeft = true;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                // console.log(\"turn right\");\r\n                this._act._turnRight = true;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                // console.log(\"walk back\");\r\n                this._act._walkback = true;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                // console.log(\"strafe left\");\r\n                this._act._stepLeft = true;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                // console.log(\"strafe right\");\r\n                this._act._stepRight = true;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _onKeyUp(e: KeyboardEvent) {\r\n        if (!e.key) return;\r\n        switch (e.key.toLowerCase()) {\r\n            case \"shift\":\r\n                this._act._speedMod = false;\r\n                break;\r\n            case \"up\":\r\n            case \"arrowup\":\r\n            case this._actionMap.walk.key:\r\n                this._act._walk = false;\r\n                break;\r\n            case \"left\":\r\n            case \"arrowleft\":\r\n            case this._actionMap.turnLeft.key:\r\n                this._act._turnLeft = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"right\":\r\n            case \"arrowright\":\r\n            case this._actionMap.turnRight.key:\r\n                this._act._turnRight = false;\r\n                this._isTurning = false;\r\n                break;\r\n            case \"down\":\r\n            case \"arrowdown\":\r\n            case this._actionMap.walkBack.key:\r\n                this._act._walkback = false;\r\n                break;\r\n            case this._actionMap.strafeLeft.key:\r\n                this._act._stepLeft = false;\r\n                break;\r\n            case this._actionMap.strafeRight.key:\r\n                this._act._stepRight = false;\r\n                break;\r\n        }\r\n        this._move = this.anyMovement();\r\n    }\r\n\r\n    private _ekb: boolean = true;\r\n    public isKeyBoardEnabled(): boolean {\r\n        return this._ekb;\r\n    }\r\n    public enableKeyBoard(b: boolean) {\r\n        this._ekb = b;\r\n        if (b) {\r\n            this._addkeylistener();\r\n        } else {\r\n            this._removekeylistener();\r\n        }\r\n    }\r\n\r\n    private _addkeylistener() {\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        canvas.addEventListener(\"keyup\", this._handleKeyUp, false);\r\n        canvas.addEventListener(\"keydown\", this._handleKeyDown, false);\r\n    }\r\n\r\n    private _removekeylistener() {\r\n        let canvas: HTMLCanvasElement = this._scene.getEngine().getRenderingCanvas();\r\n        canvas.removeEventListener(\"keyup\", this._handleKeyUp, false);\r\n        canvas.removeEventListener(\"keydown\", this._handleKeyDown, false);\r\n    }\r\n\r\n    // control movement by commands rather than keyboard.\r\n    public walk(b: boolean) {\r\n        this._act._walk = b;\r\n    }\r\n    public walkBack(b: boolean) {\r\n        this._act._walkback = b;\r\n    }\r\n    public walkBackFast(b: boolean) {\r\n        this._act._walkback = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public run(b: boolean) {\r\n        this._act._walk = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnLeft(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnLeftFast(b: boolean) {\r\n        this._act._turnLeft = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public turnRight(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n    }\r\n    public turnRightFast(b: boolean) {\r\n        this._act._turnRight = b;\r\n        if (!b) this._isTurning = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeLeft(b: boolean) {\r\n        this._act._stepLeft = b;\r\n    }\r\n    public strafeLeftFast(b: boolean) {\r\n        this._act._stepLeft = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public strafeRight(b: boolean) {\r\n        this._act._stepRight = b;\r\n    }\r\n    public strafeRightFast(b: boolean) {\r\n        this._act._stepRight = b;\r\n        this._act._speedMod = b;\r\n    }\r\n    public jump() {\r\n        this._act._jump = true;\r\n    }\r\n\r\n    public fall() {\r\n        this._grounded = false;\r\n    }\r\n\r\n    public idle() {\r\n        this._act.reset();\r\n    }\r\n\r\n    private _act: _Action;\r\n    private _renderer: () => void;\r\n    private _handleKeyUp: (e) => void;\r\n    private _handleKeyDown: (e) => void;\r\n    private _isAG: boolean = false;\r\n    public isAg() {\r\n        return this._isAG;\r\n    }\r\n\r\n\r\n\r\n\r\n    private _findSkel(n: Node): Skeleton {\r\n        let root = this._root(n);\r\n\r\n        if (root instanceof Mesh && root.skeleton) return root.skeleton;\r\n\r\n        //find all child meshes which have skeletons\r\n        let ms = root.getChildMeshes(\r\n            false,\r\n            (cm) => {\r\n                if (cm instanceof Mesh) {\r\n                    if (cm.skeleton) {\r\n                        return true;\r\n                    }\r\n                }\r\n                return false;\r\n            });\r\n\r\n        //return the skeleton of the first child mesh\r\n        if (ms.length > 0) return ms[0].skeleton; else return null;\r\n\r\n    }\r\n\r\n    private _root(tn: Node): Node {\r\n        if (tn.parent == null) return tn;\r\n        return this._root(tn.parent);\r\n    }\r\n\r\n    private _getAbstractMeshChildren(tn: Node): AbstractMesh[] {\r\n        let ms: AbstractMesh[] = new Array();\r\n        if (tn instanceof AbstractMesh) ms.push(tn);\r\n        tn.getChildren((cm) => {\r\n            if (cm instanceof AbstractMesh) ms.push(cm);\r\n            return false;\r\n        },\r\n        false)\r\n        return ms;  \r\n    }\r\n\r\n    public setAvatar(avatar: Mesh, faceForward: boolean = false): boolean {\r\n\r\n        let rootNode = this._root(avatar);\r\n        if (rootNode instanceof Mesh) {\r\n            this._avatar = rootNode;\r\n        } else {\r\n            console.error(\"Cannot move this mesh. The root node of the mesh provided is not a mesh\");\r\n            return false;\r\n        }\r\n        this._avChildren = this._getAbstractMeshChildren(rootNode);\r\n        this._skeleton = this._findSkel(avatar);\r\n        this._isAG = this._containsAG(avatar, this._scene.animationGroups, true);\r\n\r\n        this._actionMap.reset();\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n\r\n        this._setRHS(avatar);\r\n        this.setFaceForward(faceForward);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    private _ellipsoid:TransformNode = null;\r\n    public showEllipsoid(show:boolean) {\r\n        if (!show){\r\n            if (this._ellipsoid != null) this._ellipsoid.dispose();\r\n            this._ellipsoid = null;\r\n            if (this._rayLine != null) { this._rayLine.dispose(); this._rayLine = null; }\r\n            return;\r\n        }\r\n        let ellipsoid:TransformNode = new TransformNode(\"ellipsoid\", this._scene);\r\n        \r\n        let a = this._avatar.ellipsoid.x;\r\n        let b = this._avatar.ellipsoid.y;\r\n\r\n        const points = [];\r\n        for(let theta = -Math.PI/2; theta < Math.PI/2; theta += Math.PI/36) {\r\n            points.push(new BABYLON.Vector3(0, b * Math.sin(theta), a * Math.cos(theta)));\r\n        }\r\n    \r\n        const ellipse : LinesMesh[] = [];\r\n        ellipse[0] = MeshBuilder.CreateLines(\"e\", {points:points}, this._scene);\r\n        ellipse[0].color = Color3.Red();\r\n        ellipse[0].parent = ellipsoid;\r\n        ellipse[0].isPickable = false;\r\n        const steps = 12;\r\n        const dTheta = 2 * Math.PI / steps; \r\n        for(let i = 1; i < steps; i++) {\r\n                ellipse[i] = ellipse[0].clone(\"el\" + i);\r\n                ellipse[i].parent = ellipsoid;\r\n                ellipse[i].rotation.y = i * dTheta;\r\n                ellipse[i].isPickable = false;\r\n        }\r\n        ellipsoid.parent = this._avatar;\r\n        ellipsoid.position = this._avatar.ellipsoidOffset;\r\n        this._ellipsoid= ellipsoid;\r\n    }\r\n\r\n    public getAvatar() {\r\n        return this._avatar;\r\n    }\r\n\r\n    // force a skeleton to be the avatar skeleton\r\n    // should not be calling this normally\r\n    public setAvatarSkeleton(skeleton: Skeleton) {\r\n        this._skeleton = skeleton;\r\n\r\n\r\n        if (this._skeleton != null && this._skelDrivenByAG(skeleton)) this._isAG = true; else this._isAG = false;\r\n\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n    }\r\n\r\n\r\n    // this check if any of this skeleton animations is referenced by any targetedAnimation in any of the animationgroup in the scene.\r\n    private _skelDrivenByAG(skeleton: Skeleton) {\r\n        return skeleton.animations.some(sa => this._scene.animationGroups.some(ag => ag.children.some(ta => ta.animation == sa)));\r\n    }\r\n\r\n    public getSkeleton() {\r\n        return this._skeleton;\r\n    }\r\n\r\n    // does this character have any animations ?\r\n    // remember we can use meshes without anims as characters too\r\n    private _hasAnims: boolean = false;\r\n    private _hasCam: boolean = true;\r\n    //av children will be used if elastic camera is set to true\r\n    //pick collision with children will ignored then\r\n    private _avChildren:AbstractMesh[];\r\n\r\n    /**\r\n     * The avatar/character can be made up of multiple meshes arranged in a hierarchy.\r\n     * As such we will pick the root of the hierarchy as the avatar.\r\n     * The root should be a mesh as otherwise we cannot move it with moveWithCollision() method.\r\n     * \r\n     * Mutiple meshes in the hierarchy may have skeletons (if two or more meshes have skeleton then\r\n     * the skeleton will mostly likely be the same). \r\n     * So we will pick as avatar skeleton, the  skeleton of the first mesh in the hierachy which has\r\n     * a skeleton \r\n     * \r\n     * @param avatar \r\n     * @param camera \r\n     * @param scene \r\n     * @param actionMap/animationGroupMap \r\n     *        maps actions to animations and other data like speed,sound etc \r\n     *        or \r\n     *        for backward compatibility could be AnimationGroup Map\r\n     * @param faceForward \r\n     */\r\n    constructor(avatar: Mesh, camera: ArcRotateCamera, scene: Scene, actionMap?: {}, faceForward = false) {\r\n\r\n        this._camera = camera;\r\n\r\n        //if camera is null assume this would be used to control an NPC\r\n        //we cannot use mode 0 as that is dependent on camera being present. so force mode 1\r\n        if (this._camera == null) {\r\n            this._hasCam = false;\r\n            this.setMode(1);\r\n        }\r\n        this._scene = scene;\r\n\r\n        let success = this.setAvatar(avatar, faceForward);\r\n        if (!success) {\r\n            console.error(\"unable to set avatar\");\r\n        }\r\n\r\n        let dataType: string = null;\r\n        if (actionMap != null) {\r\n            dataType = this.setActionMap(<ActionMap>actionMap);\r\n        }\r\n\r\n        //try to use the existing avatar animations\r\n\r\n        //animation ranges\r\n        if (!this._isAG && this._skeleton != null) this._checkAnimRanges(this._skeleton);\r\n        //animation groups\r\n        if (this._isAG) {\r\n            //TODO\r\n        }\r\n\r\n        if (this._hasCam) this._savedCameraCollision = this._camera.checkCollisions;\r\n\r\n        // this._avatar.onCollideObservable.add(\r\n        //     function(m,evt){\r\n        //         let msg = \"Collision with: \"+m.name;\r\n        //         console.log(m);\r\n        //         console.log(evt);\r\n        //     }\r\n        // );    \r\n\r\n\r\n        this._act = new _Action();\r\n\r\n        this._renderer = () => { this._moveAVandCamera() };\r\n        this._handleKeyUp = (e) => { this._onKeyUp(e) };\r\n        this._handleKeyDown = (e) => { this._onKeyDown(e) };\r\n    }\r\n}\r\n\r\n\r\n\r\nclass _Action {\r\n\r\n    public _walk: boolean = false;\r\n    public _walkback: boolean = false;\r\n    public _turnRight: boolean = false;\r\n    public _turnLeft: boolean = false;\r\n    public _stepRight: boolean = false;\r\n    public _stepLeft: boolean = false;\r\n    public _jump: boolean = false;\r\n\r\n    // speed modifier - changes speed of movement\r\n    public _speedMod: boolean = false;\r\n\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    reset() {\r\n        this._walk = false;\r\n        this._walkback = false;\r\n        this._turnRight = false;\r\n        this._turnLeft = false;\r\n        this._stepRight = false;\r\n        this._stepLeft = false;\r\n        this._jump = false;\r\n        this._speedMod = false;\r\n    }\r\n}\r\n\r\nexport class ActionData {\r\n    public id: string;\r\n    public speed: number;\r\n    //_ds default speed.  speed is set to this on reset\r\n    public ds: number;\r\n    public sound: Sound;\r\n    public key: string;\r\n    //_dk defailt key\r\n    public dk: string;\r\n\r\n    //animation data\r\n    //if _ag is null then assuming animation range and use _name to play animationrange\r\n    //instead of name maybe call it arName?\r\n    public name: string = \"\";\r\n    public ag: AnimationGroup;\r\n    public loop: boolean = true;\r\n    public rate: number = 1;\r\n\r\n    public exist: boolean = false;\r\n\r\n    public constructor(id?: string, speed = 1, key?: string) {\r\n        this.id = id;\r\n        this.speed = speed;\r\n        this.ds = speed;\r\n        this.key = key;\r\n        this.dk = key;\r\n    }\r\n\r\n    public reset() {\r\n        this.name = \"\";\r\n        this.speed = this.ds;\r\n        this.key = this.dk;\r\n        this.loop = true;\r\n        this.rate = 1;\r\n        this.sound = null;\r\n        this.exist = false;\r\n    }\r\n\r\n}\r\n\r\n//not really a \"Map\"\r\nexport class ActionMap {\r\n    public walk = new ActionData(\"walk\", 3, \"w\");\r\n    public walkBack = new ActionData(\"walkBack\", 1.5, \"s\");\r\n    public walkBackFast = new ActionData(\"walkBackFast\", 3, \"na\");\r\n    public idle = new ActionData(\"idle\", 0, \"na\");\r\n    public idleJump = new ActionData(\"idleJump\", 6, \" \");\r\n    public run = new ActionData(\"run\", 6, \"na\");\r\n    public runJump = new ActionData(\"runJump\", 6, \"na\");\r\n    public fall = new ActionData(\"fall\", 0, \"na\");\r\n    public turnLeft = new ActionData(\"turnLeft\", Math.PI / 8, \"a\");\r\n    public turnLeftFast = new ActionData(\"turnLeftFast\", Math.PI / 4, \"na\");\r\n    public turnRight = new ActionData(\"turnRight\", Math.PI / 8, \"d\");\r\n    public turnRightFast = new ActionData(\"turnRightFast\", Math.PI / 4, \"na\");\r\n    public strafeLeft = new ActionData(\"strafeLeft\", 1.5, \"q\");\r\n    public strafeLeftFast = new ActionData(\"strafeLeftFast\", 3, \"na\");\r\n    public strafeRight = new ActionData(\"strafeRight\", 1.5, \"e\");\r\n    public strafeRightFast = new ActionData(\"strafeRightFast\", 3, \"na\");\r\n    public slideBack = new ActionData(\"slideBack\", 0, \"na\");\r\n\r\n    public reset() {\r\n        let keys: string[] = Object.keys(this);\r\n        for (let key of keys) {\r\n            let act = this[key];\r\n            if (!(act instanceof ActionData)) continue;\r\n            act.reset()\r\n        }\r\n    }\r\n};\r\n\r\nexport class CCSettings {\r\n    public faceForward: boolean;\r\n    public gravity: number;\r\n    public minSlopeLimit: number;\r\n    public maxSlopeLimit: number;\r\n    public stepOffset: number;\r\n    public cameraElastic: boolean = true;\r\n    public elasticSteps: number;\r\n    public makeInvisble: boolean = true;\r\n    public cameraTarget: Vector3 = Vector3.Zero();\r\n    public noFirstPerson: boolean = false;\r\n    public topDown: boolean = true;\r\n    //turningOff takes effect only when topDown is false\r\n    public turningOff: boolean = true;\r\n    public keyboard: boolean = true;\r\n    public sound: Sound;\r\n}\r\n"],"names":["root","factory","exports","module","require","define","amd","a","i","self","__WEBPACK_EXTERNAL_MODULE__247__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","avatar","camera","scene","actionMap","faceForward","_avatar","_skeleton","_gravity","_minSlopeLimit","_maxSlopeLimit","_sl1","Math","PI","this","_sl2","_stepOffset","_actionMap","ActionMap","_cameraElastic","_cameraTarget","Vector3","_noFirstPerson","_down","_mode","_saveMode","_isLHS_RHS","_signLHS_RHS","_started","_stopAnim","_prevActData","_avStartPos","_prevPickY","_grounded","_freeFallDist","_inFreeFall","_wasWalking","_wasRunning","_moveVector","_soundLoopTime","_sndId","_jumpStartPosY","_jumpTime","_movFallTime","_sign","_isTurning","_noRot","_steps","_stepHigh","_rayLine","_lineOptions","_idleFallTime","_groundFrameCount","_groundFrameMax","_savedCameraCollision","_inFP","_visiblityMap","Map","_ray","Ray","_rayDir","_cameraSkin","_pickedMeshes","Array","_makeInvisible","_elasticSteps","_move","_ekb","_isAG","_ellipsoid","_hasAnims","_hasCam","_camera","setMode","_scene","setAvatar","console","error","setActionMap","_checkAnimRanges","checkCollisions","_act","_Action","_renderer","_moveAVandCamera","_handleKeyUp","e","_onKeyUp","_handleKeyDown","_onKeyDown","getScene","setSlopeLimit","minSlopeLimit","maxSlopeLimit","setStepOffset","stepOffset","setWalkSpeed","walk","speed","setRunSpeed","run","setBackSpeed","walkBack","setBackFastSpeed","walkBackFast","setJumpSpeed","idleJump","runJump","setLeftSpeed","strafeLeft","setLeftFastSpeed","strafeLeftFast","setRightSpeed","strafeRight","setRightFastSpeed","setTurnSpeed","turnLeft","turnRight","setTurnFastSpeed","turnLeftFast","turnRightFast","setGravity","setAnimationGroups","agMap","exist","ag","stop","setAnimationRanges","arMap","inActMap","inActData","keys","ccActionName","ccActData","ActionData","id","AnimationGroup","name","loop","rate","sound","_checkFastAnims","getActionMap","map","actDataI","actDataO","getSettings","ccs","CCSettings","isFaceForward","topDown","getMode","turningOff","isTurningOff","cameraTarget","clone","cameraElastic","elasticSteps","makeInvisble","gravity","keyboard","noFirstPerson","_stepSound","setSettings","setFaceForward","setTurningOff","setCameraTarget","setCameraElasticity","setElasticiSteps","makeObstructionInvisible","enableKeyBoard","setNoFirstPerson","setSound","_setAnim","anim","animName","getAnimationRange","enableBlending","act","targetedAnimations","ta","animation","blendingSpeed","disableBlending","setWalkAnim","rangeName","setRunAnim","setWalkBackAnim","_copySlowAnims","setWalkBackFastAnim","setSlideBackAnim","slideBack","setIdleAnim","idle","setTurnRightAnim","setTurnRightFastAnim","setTurnLeftAnim","setTurnLeftFastAnim","setStrafeRightAnim","strafeRightFast","setStrafeRightFastAnim","setStrafeLeftAnim","setStrafeLeftFastAnim","setIdleJumpAnim","setRunJumpAnim","setFallAnim","fall","ccActionNames","attachToMesh","setWalkKey","toLowerCase","setWalkBackKey","setTurnLeftKey","setTurnRightKey","setStrafeLeftKey","setStrafeRightKey","setJumpKey","b","v","copyFrom","cameraCollisionChanged","skel","f","s","_setRHS","mesh","meshMatrix","getWorldMatrix","_localX","m","_localY","_localZ","actualZ","_ff","_rhsSign","useRightHandedSystem","_av2cam","_ffSign","checkAGs","_containsAG","node","ags","fromRoot","ns","_getRoot","getChildren","TransformNode","indexOf","target","tn","parent","start","reset","_updateTargetValue","_addkeylistener","registerBeforeRender","unregisterBeforeRender","_removekeylistener","pauseAnim","stopAnimation","clearInterval","resumeAnim","_isAvFacingCamera","forward","position","subtract","actData","dt","getEngine","getDeltaTime","_jump","_doJump","anyMovement","_doMove","_doIdle","c","fps","framePerSecond","to","from","beginAnimation","getAnimations","play","setInterval","abs","y","disp","forwardDist","jumpDist","normalize","scaleToRef","_calcJumpDist","moveWithCollisions","length","_endJump","actDisp","_areVectorsEqual","_isNearGround","slope","v1","v2","p","x","z","_verticalSlope","atan","sqrt","u","moving","actdata","_rotateAV2C","_rotateAVnC","sign","horizDist","_speedMod","calcMovePOV","_walk","_ng","hit","_slp","_endFreeFall","fwd","upDist","up","fact","ellipsoid","origin","addToRef","ellipsoidOffset","direction","_drawLines","add","pi","pickWithRay","_avChildren","includes","getNormal","asin","pickedMesh","pickedPoint","_isNearGround_old","pis","multiPickWithRay","pt1","pt2","myPoints","points","updatable","MeshBuilder","instance","ca","alpha","_turnRight","rotation","_turnLeft","_walkback","_stepLeft","_stepRight","turnAngle","_groundIt","_unGroundIt","radius","lowerRadiusLimit","_handleObstruction","_makeMeshInvisible","_restoreVisiblity","set","visibility","getChildMeshes","Mesh","subtractToRef","isPickable","_prevPickedMeshes","isVisible","push","pm","_isSeeAble","pp","c2p","l","step","addInPlace","normalizeToNew","scaleInPlace","material","alphaMode","repeat","isKeyBoardEnabled","canvas","getRenderingCanvas","addEventListener","removeEventListener","jump","isAg","_findSkel","_root","skeleton","ms","cm","_getAbstractMeshChildren","AbstractMesh","rootNode","animationGroups","showEllipsoid","show","dispose","theta","BABYLON","sin","cos","ellipse","color","Color3","dTheta","getAvatar","setAvatarSkeleton","_skelDrivenByAG","animations","some","sa","children","getSkeleton","ds","dk"],"sourceRoot":""}